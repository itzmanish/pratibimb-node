// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: node/v1/node.proto

package v1

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/itzmanish/go-micro/v2/api"
	client "github.com/itzmanish/go-micro/v2/client"
	server "github.com/itzmanish/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NodeService service

func NewNodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "NodeService.CreateNodeRoom",
			Path:    []string{"/v1/room"},
			Method:  []string{"POST"},
			Body:    "id,secret",
			Handler: "rpc",
		},
	}
}

// Client API for NodeService service

type NodeService interface {
	CreateNodeRoom(ctx context.Context, in *CreateNodeRoomRequest, opts ...client.CallOption) (*CreateNodeRoomResponse, error)
}

type nodeService struct {
	c    client.Client
	name string
}

func NewNodeService(name string, c client.Client) NodeService {
	return &nodeService{
		c:    c,
		name: name,
	}
}

func (c *nodeService) CreateNodeRoom(ctx context.Context, in *CreateNodeRoomRequest, opts ...client.CallOption) (*CreateNodeRoomResponse, error) {
	req := c.c.NewRequest(c.name, "NodeService.CreateNodeRoom", in)
	out := new(CreateNodeRoomResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeService service

type NodeServiceHandler interface {
	CreateNodeRoom(context.Context, *CreateNodeRoomRequest, *CreateNodeRoomResponse) error
}

func RegisterNodeServiceHandler(s server.Server, hdlr NodeServiceHandler, opts ...server.HandlerOption) error {
	type nodeService interface {
		CreateNodeRoom(ctx context.Context, in *CreateNodeRoomRequest, out *CreateNodeRoomResponse) error
	}
	type NodeService struct {
		nodeService
	}
	h := &nodeServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "NodeService.CreateNodeRoom",
		Path:    []string{"/v1/room"},
		Method:  []string{"POST"},
		Body:    "id,secret",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&NodeService{h}, opts...))
}

type nodeServiceHandler struct {
	NodeServiceHandler
}

func (h *nodeServiceHandler) CreateNodeRoom(ctx context.Context, in *CreateNodeRoomRequest, out *CreateNodeRoomResponse) error {
	return h.NodeServiceHandler.CreateNodeRoom(ctx, in, out)
}
